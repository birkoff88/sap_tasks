#!/usr/bin/env bash
# task2/gitea-aws/scripts/setup.sh
set -euo pipefail

bar() { printf "\n================================================\n%s\n================================================\n\n" "$1"; }
say() { printf "• %s\n" "$*"; }
need() { command -v "$1" >/dev/null || { echo "✗ Missing: $1"; exit 1; }; }

# Resolve dirs: run Terraform from the folder that has main.tf
SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"
TF_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"   # parent of scripts/
cd "$TF_DIR"

bar "Gitea Infrastructure Setup"

# Preflight
say "Checking prerequisites..."
need terraform
need aws
say "Terraform: $(terraform version | head -n1)"
aws sts get-caller-identity >/dev/null || { echo "✗ AWS credentials not configured (run: aws configure)"; exit 1; }
AWS_ACCOUNT="$(aws sts get-caller-identity --query Account --output text)"
AWS_ARN="$(aws sts get-caller-identity --query Arn --output text)"
say "AWS Account: $AWS_ACCOUNT"
say "Caller ARN : $AWS_ARN"

# Prompts (with sane defaults matching variables.tf)
echo
echo "Configuration:"
read -r -p "AWS Region [us-east-1]: " AWS_REGION
AWS_REGION="${AWS_REGION:-us-east-1}"
say "Using region: $AWS_REGION"

echo
say "Available EC2 key pairs in $AWS_REGION (optional SSH; SSM is already enabled):"
aws ec2 describe-key-pairs --region "$AWS_REGION" --query 'KeyPairs[].KeyName' --output table 2>/dev/null || true
read -r -p "EC2 Key Pair Name (leave empty for none): " KEY_NAME
if [[ -n "${KEY_NAME}" ]]; then
  aws ec2 describe-key-pairs --region "$AWS_REGION" --key-names "$KEY_NAME" >/dev/null || { echo "✗ Key pair '$KEY_NAME' not found in $AWS_REGION"; exit 1; }
  say "Key pair verified."
fi

read -r -p "Instance type [t3.small]: " INSTANCE_TYPE
INSTANCE_TYPE="${INSTANCE_TYPE:-t3.small}"

read -r -p "Number of Gitea instances [2]: " INSTANCE_COUNT
INSTANCE_COUNT="${INSTANCE_COUNT:-2}"
# Keep ASG max a bit higher to allow rolling updates
ASG_MIN="$INSTANCE_COUNT"
ASG_DESIRED="$INSTANCE_COUNT"
ASG_MAX="$(( INSTANCE_COUNT + 2 ))"

# Write terraform.tfvars (idempotent)
echo
say "Writing terraform.tfvars..."
cat > terraform.tfvars <<EOF
# --- Generated by scripts/setup.sh ---
project_name = "gitea"
env          = "demo"
aws_region   = "${AWS_REGION}"

# EC2 / ASG
key_name       = "${KEY_NAME}"
instance_type  = "${INSTANCE_TYPE}"
asg_min        = ${ASG_MIN}
asg_desired    = ${ASG_DESIRED}
asg_max        = ${ASG_MAX}

# App
app_port       = 3000
app_mount_dir  = "/data/gitea"

# DB
db_name        = "gitea"
db_username    = "gitea"
engine_version = "16.3"
instance_class = "db.t4g.micro"

# Tags
extra_tags = { CreatedBy = "setup-script" }
EOF
say "✓ terraform.tfvars written."

# Terraform run
echo
say "Formatting Terraform..."
terraform fmt -recursive

say "Initializing..."
terraform init -input=false

say "Validating..."
terraform validate

say "Planning..."
terraform plan -input=false -out=tfplan

echo
read -r -p "Apply the plan now? [Y/n]: " APPLY
APPLY="${APPLY:-Y}"
if [[ "$APPLY" =~ ^[Yy]$ ]]; then
  say "Applying..."
  terraform apply -input=false -auto-approve tfplan
  echo
  say "Outputs:"
  ALB="$(terraform output -raw alb_dns_name 2>/dev/null || true)"
  RDS="$(terraform output -raw rds_endpoint 2>/dev/null || true)"
  SEC="$(terraform output -raw db_secret_arn 2>/dev/null || true)"
  printf "ALB   : http://%s\nRDS   : %s\nSECRET: %s\n" "${ALB:-<n/a>}" "${RDS:-<n/a>}" "${SEC:-<n/a>}"
  # Open browser if possible
  if [[ -n "${ALB:-}" ]]; then
    if command -v open >/dev/null; then open "http://${ALB}"; fi
    if command -v xdg-open >/dev/null; then xdg-open "http://${ALB}"; fi
  fi
else
  say "Skipped apply. Next steps:"
  echo "  terraform apply -auto-approve tfplan"
  echo "  echo \"http://\$(terraform output -raw alb_dns_name)\""
fi

echo
bar "Setup complete"
